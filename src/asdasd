// Create a simple c++ program

#include <iostream>
using namespace std;

int main()
{

    int spriteSize = 80;
    int columnCount = 800 / spriteSize;
    int lineCount = (600 / (spriteSize / 2)) * 2 - 1;

    // Matrix that i need
    int matrix[lineCount][columnCount][2];
    // int matrix[lineCount][columnCount][2] = {
    //     {{0, 0}, {-1, 1}, {-2, 2}, {-3, 3}, {-4, 4}, {-5, 5}, {-6, 6}, {-7, 7}, {-8, 8}, {-9, 9}},
    //     {{0, 1}, {-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {-5, 6}, {-6, 7}, {-7, 8}, {-8, 9}, {-9, 10}},
    //     {{1, 1}, {0, 2}, {-1, 3}, {-2, 4}, {-3, 5}, {-4, 6}, {-5, 7}, {-6, 8}, {-7, 9}, {-8, 10}},
    //     {{1, 2}, {0, 3}, {-1, 4}, {-2, 5}, {-3, 6}, {-4, 7}, {-5, 8}, {-6, 9}, {-7, 10}, {-8, 11}},
    //     {{2, 2}, {1, 3}, {0, 4}, {-1, 5}, {-2, 6}, {-3, 7}, {-4, 8}, {-5, 9}, {-6, 10}, {-7, 11}},
    //     {{2, 3}, {1, 4}, {0, 5}, {-1, 6}, {-2, 7}, {-3, 8}, {-4, 9}, {-5, 10}, {-6, 11}, {-7, 12}},
    //     {{3, 3}, {2, 4}, {1, 5}, {0, 6}, {-1, 7}, {-2, 8}, {-3, 9}, {-4, 10}, {-5, 11}, {-6, 12}},
    //     {{3, 4}, {2, 5}, {1, 6}, {0, 7}, {-1, 8}, {-2, 9}, {-3, 10}, {-4, 11}, {-5, 12}, {-6, 13}}};

    int startingY = 0;
    for (int currentLine = 0; currentLine < lineCount; currentLine++)
    {
        for (int currentColumn = 0; currentColumn < columnCount; currentColumn++)
        {

            // If it's the first line, then we need to start the values
            if (currentLine == 0)
            {
                matrix[currentLine][currentColumn][0] = currentColumn * -1;
                matrix[currentLine][currentColumn][1] = currentColumn;
            }
            else
            {
                if (currentLine % 2 == 0)
                { // Do not copy the values from the previous line
                    matrix[currentLine][currentColumn][0] = matrix[currentLine - 1][currentColumn][0] + 1;
                }
                else
                { // Copy the values from the previous line
                    matrix[currentLine][currentColumn][0] = matrix[currentLine - 1][currentColumn][0];
                }

                if (currentColumn == 0)
                {
                    startingY = currentLine - matrix[currentLine][currentColumn][0];
                    matrix[currentLine][currentColumn][1] = startingY;
                }
                else
                {
                    matrix[currentLine][currentColumn][1] = matrix[currentLine][currentColumn - 1][1] + 1;
                }
            }
            matrix[currentLine][currentColumn][0] -= 1;
            matrix[currentLine][currentColumn][1] -= 1;
        }
    }

    // Print the formatted matrix (each element should have the same size)
    for (int currentLine = 0; currentLine < lineCount; currentLine++)
    {
        for (int currentColumn = 0; currentColumn < columnCount; currentColumn++)
        {
            printf("[%2d,%2d] ", matrix[currentLine][currentColumn][0], matrix[currentLine][currentColumn][1]);
        }
        cout << endl;
    }
    return 0;
}